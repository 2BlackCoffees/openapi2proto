// Code generated by protoc-gen-go.
// source: sem.proto
// DO NOT EDIT!

/*
Package thesemanticapi is a generated protocol buffer package.

It is generated from these files:
	sem.proto

It has these top-level messages:
	GetConceptSearchRequest
	GetConceptSearchResponse
	GetNameConceptTypeSpecificConceptRequest
	GetNameConceptTypeSpecificConceptResponse
	Concept
	ConceptRelation
	TestModel
*/
package thesemanticapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type GetConceptSearchRequest_Field int32

const (
	GetConceptSearchRequest_Field_all              GetConceptSearchRequest_Field = 0
	GetConceptSearchRequest_Field_pages            GetConceptSearchRequest_Field = 1
	GetConceptSearchRequest_Field_ticker_symbol    GetConceptSearchRequest_Field = 2
	GetConceptSearchRequest_Field_links            GetConceptSearchRequest_Field = 3
	GetConceptSearchRequest_Field_taxonomy         GetConceptSearchRequest_Field = 4
	GetConceptSearchRequest_Field_combinations     GetConceptSearchRequest_Field = 5
	GetConceptSearchRequest_Field_geocodes         GetConceptSearchRequest_Field = 6
	GetConceptSearchRequest_Field_article_list     GetConceptSearchRequest_Field = 7
	GetConceptSearchRequest_Field_scope_notes      GetConceptSearchRequest_Field = 8
	GetConceptSearchRequest_Field_search_api_query GetConceptSearchRequest_Field = 9
)

var GetConceptSearchRequest_Field_name = map[int32]string{
	0: "Field_all",
	1: "Field_pages",
	2: "Field_ticker_symbol",
	3: "Field_links",
	4: "Field_taxonomy",
	5: "Field_combinations",
	6: "Field_geocodes",
	7: "Field_article_list",
	8: "Field_scope_notes",
	9: "Field_search_api_query",
}
var GetConceptSearchRequest_Field_value = map[string]int32{
	"Field_all":              0,
	"Field_pages":            1,
	"Field_ticker_symbol":    2,
	"Field_links":            3,
	"Field_taxonomy":         4,
	"Field_combinations":     5,
	"Field_geocodes":         6,
	"Field_article_list":     7,
	"Field_scope_notes":      8,
	"Field_search_api_query": 9,
}

func (x GetConceptSearchRequest_Field) String() string {
	return proto.EnumName(GetConceptSearchRequest_Field_name, int32(x))
}
func (GetConceptSearchRequest_Field) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type GetNameConceptTypeSpecificConceptRequest_ConceptType int32

const (
	GetNameConceptTypeSpecificConceptRequest_Concept_type_nytd_geo GetNameConceptTypeSpecificConceptRequest_ConceptType = 0
	GetNameConceptTypeSpecificConceptRequest_Concept_type_nytd_per GetNameConceptTypeSpecificConceptRequest_ConceptType = 1
	GetNameConceptTypeSpecificConceptRequest_Concept_type_nytd_org GetNameConceptTypeSpecificConceptRequest_ConceptType = 2
	GetNameConceptTypeSpecificConceptRequest_Concept_type_nytd_des GetNameConceptTypeSpecificConceptRequest_ConceptType = 3
)

var GetNameConceptTypeSpecificConceptRequest_ConceptType_name = map[int32]string{
	0: "Concept_type_nytd_geo",
	1: "Concept_type_nytd_per",
	2: "Concept_type_nytd_org",
	3: "Concept_type_nytd_des",
}
var GetNameConceptTypeSpecificConceptRequest_ConceptType_value = map[string]int32{
	"Concept_type_nytd_geo": 0,
	"Concept_type_nytd_per": 1,
	"Concept_type_nytd_org": 2,
	"Concept_type_nytd_des": 3,
}

func (x GetNameConceptTypeSpecificConceptRequest_ConceptType) String() string {
	return proto.EnumName(GetNameConceptTypeSpecificConceptRequest_ConceptType_name, int32(x))
}
func (GetNameConceptTypeSpecificConceptRequest_ConceptType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

type GetNameConceptTypeSpecificConceptRequest_Field int32

const (
	GetNameConceptTypeSpecificConceptRequest_Field_all              GetNameConceptTypeSpecificConceptRequest_Field = 0
	GetNameConceptTypeSpecificConceptRequest_Field_pages            GetNameConceptTypeSpecificConceptRequest_Field = 1
	GetNameConceptTypeSpecificConceptRequest_Field_ticker_symbol    GetNameConceptTypeSpecificConceptRequest_Field = 2
	GetNameConceptTypeSpecificConceptRequest_Field_links            GetNameConceptTypeSpecificConceptRequest_Field = 3
	GetNameConceptTypeSpecificConceptRequest_Field_taxonomy         GetNameConceptTypeSpecificConceptRequest_Field = 4
	GetNameConceptTypeSpecificConceptRequest_Field_combinations     GetNameConceptTypeSpecificConceptRequest_Field = 5
	GetNameConceptTypeSpecificConceptRequest_Field_geocodes         GetNameConceptTypeSpecificConceptRequest_Field = 6
	GetNameConceptTypeSpecificConceptRequest_Field_article_list     GetNameConceptTypeSpecificConceptRequest_Field = 7
	GetNameConceptTypeSpecificConceptRequest_Field_scope_notes      GetNameConceptTypeSpecificConceptRequest_Field = 8
	GetNameConceptTypeSpecificConceptRequest_Field_search_api_query GetNameConceptTypeSpecificConceptRequest_Field = 9
)

var GetNameConceptTypeSpecificConceptRequest_Field_name = map[int32]string{
	0: "Field_all",
	1: "Field_pages",
	2: "Field_ticker_symbol",
	3: "Field_links",
	4: "Field_taxonomy",
	5: "Field_combinations",
	6: "Field_geocodes",
	7: "Field_article_list",
	8: "Field_scope_notes",
	9: "Field_search_api_query",
}
var GetNameConceptTypeSpecificConceptRequest_Field_value = map[string]int32{
	"Field_all":              0,
	"Field_pages":            1,
	"Field_ticker_symbol":    2,
	"Field_links":            3,
	"Field_taxonomy":         4,
	"Field_combinations":     5,
	"Field_geocodes":         6,
	"Field_article_list":     7,
	"Field_scope_notes":      8,
	"Field_search_api_query": 9,
}

func (x GetNameConceptTypeSpecificConceptRequest_Field) String() string {
	return proto.EnumName(GetNameConceptTypeSpecificConceptRequest_Field_name, int32(x))
}
func (GetNameConceptTypeSpecificConceptRequest_Field) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 1}
}

type ConceptRelation_Class int32

const (
	ConceptRelation_Class_nytd_geo ConceptRelation_Class = 0
	ConceptRelation_Class_nytd_per ConceptRelation_Class = 1
	ConceptRelation_Class_nytd_org ConceptRelation_Class = 2
	ConceptRelation_Class_nytd_des ConceptRelation_Class = 3
)

var ConceptRelation_Class_name = map[int32]string{
	0: "Class_nytd_geo",
	1: "Class_nytd_per",
	2: "Class_nytd_org",
	3: "Class_nytd_des",
}
var ConceptRelation_Class_value = map[string]int32{
	"Class_nytd_geo": 0,
	"Class_nytd_per": 1,
	"Class_nytd_org": 2,
	"Class_nytd_des": 3,
}

func (x ConceptRelation_Class) String() string {
	return proto.EnumName(ConceptRelation_Class_name, int32(x))
}
func (ConceptRelation_Class) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type TestModel_Category int32

const (
	TestModel_Category_nytd_geo TestModel_Category = 0
	TestModel_Category_nytd_per TestModel_Category = 1
	TestModel_Category_nytd_org TestModel_Category = 2
	TestModel_Category_nytd_des TestModel_Category = 3
)

var TestModel_Category_name = map[int32]string{
	0: "Category_nytd_geo",
	1: "Category_nytd_per",
	2: "Category_nytd_org",
	3: "Category_nytd_des",
}
var TestModel_Category_value = map[string]int32{
	"Category_nytd_geo": 0,
	"Category_nytd_per": 1,
	"Category_nytd_org": 2,
	"Category_nytd_des": 3,
}

func (x TestModel_Category) String() string {
	return proto.EnumName(TestModel_Category_name, int32(x))
}
func (TestModel_Category) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type GetConceptSearchRequest struct {
	Offset int32  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Query  string `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
}

func (m *GetConceptSearchRequest) Reset()                    { *m = GetConceptSearchRequest{} }
func (m *GetConceptSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConceptSearchRequest) ProtoMessage()               {}
func (*GetConceptSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetConceptSearchResponse struct {
	Copyright  string             `protobuf:"bytes,1,opt,name=copyright" json:"copyright,omitempty"`
	NumResults int32              `protobuf:"varint,2,opt,name=num_results,json=numResults" json:"num_results,omitempty"`
	Results    []*ConceptRelation `protobuf:"bytes,3,rep,name=results" json:"results,omitempty"`
	Status     string             `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *GetConceptSearchResponse) Reset()                    { *m = GetConceptSearchResponse{} }
func (m *GetConceptSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*GetConceptSearchResponse) ProtoMessage()               {}
func (*GetConceptSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetConceptSearchResponse) GetResults() []*ConceptRelation {
	if m != nil {
		return m.Results
	}
	return nil
}

type GetNameConceptTypeSpecificConceptRequest struct {
	Query           string `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	SpecificConcept string `protobuf:"bytes,4,opt,name=specific_concept,json=specificConcept" json:"specific_concept,omitempty"`
}

func (m *GetNameConceptTypeSpecificConceptRequest) Reset() {
	*m = GetNameConceptTypeSpecificConceptRequest{}
}
func (m *GetNameConceptTypeSpecificConceptRequest) String() string { return proto.CompactTextString(m) }
func (*GetNameConceptTypeSpecificConceptRequest) ProtoMessage()    {}
func (*GetNameConceptTypeSpecificConceptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2}
}

type GetNameConceptTypeSpecificConceptResponse struct {
	Copyright  string     `protobuf:"bytes,1,opt,name=copyright" json:"copyright,omitempty"`
	NumResults int32      `protobuf:"varint,2,opt,name=num_results,json=numResults" json:"num_results,omitempty"`
	Results    []*Concept `protobuf:"bytes,3,rep,name=results" json:"results,omitempty"`
	Status     string     `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *GetNameConceptTypeSpecificConceptResponse) Reset() {
	*m = GetNameConceptTypeSpecificConceptResponse{}
}
func (m *GetNameConceptTypeSpecificConceptResponse) String() string { return proto.CompactTextString(m) }
func (*GetNameConceptTypeSpecificConceptResponse) ProtoMessage()    {}
func (*GetNameConceptTypeSpecificConceptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3}
}

func (m *GetNameConceptTypeSpecificConceptResponse) GetResults() []*Concept {
	if m != nil {
		return m.Results
	}
	return nil
}

type Concept struct {
	Ancestors      []*ConceptRelation     `protobuf:"bytes,1,rep,name=ancestors" json:"ancestors,omitempty"`
	Combinations   []*Concept_Combination `protobuf:"bytes,3,rep,name=combinations" json:"combinations,omitempty"`
	ConceptCreated string                 `protobuf:"bytes,4,opt,name=concept_created,json=conceptCreated" json:"concept_created,omitempty"`
	ConceptId      int32                  `protobuf:"varint,5,opt,name=concept_id,json=conceptId" json:"concept_id,omitempty"`
	ConceptName    string                 `protobuf:"bytes,6,opt,name=concept_name,json=conceptName" json:"concept_name,omitempty"`
	ConceptStatus  string                 `protobuf:"bytes,7,opt,name=concept_status,json=conceptStatus" json:"concept_status,omitempty"`
	ConceptType    string                 `protobuf:"bytes,8,opt,name=concept_type,json=conceptType" json:"concept_type,omitempty"`
	ConceptUpdated string                 `protobuf:"bytes,9,opt,name=concept_updated,json=conceptUpdated" json:"concept_updated,omitempty"`
	Descendants    []*ConceptRelation     `protobuf:"bytes,10,rep,name=descendants" json:"descendants,omitempty"`
	IsTimesTag     int32                  `protobuf:"varint,11,opt,name=is_times_tag,json=isTimesTag" json:"is_times_tag,omitempty"`
	Links          []*Concept_Link        `protobuf:"bytes,12,rep,name=links" json:"links,omitempty"`
	ScopeNotes     []*Concept_ScopeNote   `protobuf:"bytes,13,rep,name=scope_notes,json=scopeNotes" json:"scope_notes,omitempty"`
	SearchApiQuery string                 `protobuf:"bytes,14,opt,name=search_api_query,json=searchApiQuery" json:"search_api_query,omitempty"`
	Taxonomy       []*Concept_Taxonomy    `protobuf:"bytes,15,rep,name=taxonomy" json:"taxonomy,omitempty"`
	Vernacular     string                 `protobuf:"bytes,16,opt,name=vernacular" json:"vernacular,omitempty"`
}

func (m *Concept) Reset()                    { *m = Concept{} }
func (m *Concept) String() string            { return proto.CompactTextString(m) }
func (*Concept) ProtoMessage()               {}
func (*Concept) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Concept) GetAncestors() []*ConceptRelation {
	if m != nil {
		return m.Ancestors
	}
	return nil
}

func (m *Concept) GetCombinations() []*Concept_Combination {
	if m != nil {
		return m.Combinations
	}
	return nil
}

func (m *Concept) GetDescendants() []*ConceptRelation {
	if m != nil {
		return m.Descendants
	}
	return nil
}

func (m *Concept) GetLinks() []*Concept_Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Concept) GetScopeNotes() []*Concept_ScopeNote {
	if m != nil {
		return m.ScopeNotes
	}
	return nil
}

func (m *Concept) GetTaxonomy() []*Concept_Taxonomy {
	if m != nil {
		return m.Taxonomy
	}
	return nil
}

type Concept_ArticleList struct {
	Results []*Concept_ArticleList_Result `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Total   int32                         `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *Concept_ArticleList) Reset()                    { *m = Concept_ArticleList{} }
func (m *Concept_ArticleList) String() string            { return proto.CompactTextString(m) }
func (*Concept_ArticleList) ProtoMessage()               {}
func (*Concept_ArticleList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

func (m *Concept_ArticleList) GetResults() []*Concept_ArticleList_Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type Concept_ArticleList_Result struct {
	Body           string                               `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
	Byline         string                               `protobuf:"bytes,2,opt,name=byline" json:"byline,omitempty"`
	Concepts       *Concept_ArticleList_Result_Concepts `protobuf:"bytes,3,opt,name=concepts" json:"concepts,omitempty"`
	Date           string                               `protobuf:"bytes,4,opt,name=date" json:"date,omitempty"`
	DocumentType   string                               `protobuf:"bytes,5,opt,name=document_type,json=documentType" json:"document_type,omitempty"`
	Title          string                               `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
	TypeOfMaterial string                               `protobuf:"bytes,7,opt,name=type_of_material,json=typeOfMaterial" json:"type_of_material,omitempty"`
	Url            string                               `protobuf:"bytes,8,opt,name=url" json:"url,omitempty"`
}

func (m *Concept_ArticleList_Result) Reset()         { *m = Concept_ArticleList_Result{} }
func (m *Concept_ArticleList_Result) String() string { return proto.CompactTextString(m) }
func (*Concept_ArticleList_Result) ProtoMessage()    {}
func (*Concept_ArticleList_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0, 0}
}

func (m *Concept_ArticleList_Result) GetConcepts() *Concept_ArticleList_Result_Concepts {
	if m != nil {
		return m.Concepts
	}
	return nil
}

type Concept_ArticleList_Result_Concepts struct {
	NytdDes []string `protobuf:"bytes,1,rep,name=nytd_des,json=nytdDes" json:"nytd_des,omitempty"`
	NytdOrg []string `protobuf:"bytes,2,rep,name=nytd_org,json=nytdOrg" json:"nytd_org,omitempty"`
	NytdPer []string `protobuf:"bytes,3,rep,name=nytd_per,json=nytdPer" json:"nytd_per,omitempty"`
}

func (m *Concept_ArticleList_Result_Concepts) Reset()         { *m = Concept_ArticleList_Result_Concepts{} }
func (m *Concept_ArticleList_Result_Concepts) String() string { return proto.CompactTextString(m) }
func (*Concept_ArticleList_Result_Concepts) ProtoMessage()    {}
func (*Concept_ArticleList_Result_Concepts) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0, 0, 0}
}

type Concept_Combination struct {
	CombinationNote              string `protobuf:"bytes,1,opt,name=combination_note,json=combinationNote" json:"combination_note,omitempty"`
	CombinationSourceConceptId   int32  `protobuf:"varint,2,opt,name=combination_source_concept_id,json=combinationSourceConceptId" json:"combination_source_concept_id,omitempty"`
	CombinationSourceConceptName string `protobuf:"bytes,3,opt,name=combination_source_concept_name,json=combinationSourceConceptName" json:"combination_source_concept_name,omitempty"`
	CombinationSourceConceptType string `protobuf:"bytes,4,opt,name=combination_source_concept_type,json=combinationSourceConceptType" json:"combination_source_concept_type,omitempty"`
	CombinationTargetConceptId   int32  `protobuf:"varint,5,opt,name=combination_target_concept_id,json=combinationTargetConceptId" json:"combination_target_concept_id,omitempty"`
	CombinationTargetConceptName string `protobuf:"bytes,6,opt,name=combination_target_concept_name,json=combinationTargetConceptName" json:"combination_target_concept_name,omitempty"`
	CombinationTargetConceptType string `protobuf:"bytes,7,opt,name=combination_target_concept_type,json=combinationTargetConceptType" json:"combination_target_concept_type,omitempty"`
}

func (m *Concept_Combination) Reset()                    { *m = Concept_Combination{} }
func (m *Concept_Combination) String() string            { return proto.CompactTextString(m) }
func (*Concept_Combination) ProtoMessage()               {}
func (*Concept_Combination) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 1} }

type Concept_Link struct {
	ConceptId     int32  `protobuf:"varint,1,opt,name=concept_id,json=conceptId" json:"concept_id,omitempty"`
	ConceptName   string `protobuf:"bytes,2,opt,name=concept_name,json=conceptName" json:"concept_name,omitempty"`
	ConceptStatus string `protobuf:"bytes,3,opt,name=concept_status,json=conceptStatus" json:"concept_status,omitempty"`
	ConceptType   string `protobuf:"bytes,4,opt,name=concept_type,json=conceptType" json:"concept_type,omitempty"`
	IsTimesTag    int32  `protobuf:"varint,5,opt,name=is_times_tag,json=isTimesTag" json:"is_times_tag,omitempty"`
	Link          string `protobuf:"bytes,6,opt,name=link" json:"link,omitempty"`
	LinkId        int32  `protobuf:"varint,7,opt,name=link_id,json=linkId" json:"link_id,omitempty"`
	LinkType      string `protobuf:"bytes,8,opt,name=link_type,json=linkType" json:"link_type,omitempty"`
	MappingType   string `protobuf:"bytes,9,opt,name=mapping_type,json=mappingType" json:"mapping_type,omitempty"`
	Relation      string `protobuf:"bytes,10,opt,name=relation" json:"relation,omitempty"`
}

func (m *Concept_Link) Reset()                    { *m = Concept_Link{} }
func (m *Concept_Link) String() string            { return proto.CompactTextString(m) }
func (*Concept_Link) ProtoMessage()               {}
func (*Concept_Link) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 2} }

type Concept_ScopeNote struct {
	ScopeNote     string `protobuf:"bytes,1,opt,name=scope_note,json=scopeNote" json:"scope_note,omitempty"`
	ScopeNoteName string `protobuf:"bytes,2,opt,name=scope_note_name,json=scopeNoteName" json:"scope_note_name,omitempty"`
	ScopeNoteType string `protobuf:"bytes,3,opt,name=scope_note_type,json=scopeNoteType" json:"scope_note_type,omitempty"`
}

func (m *Concept_ScopeNote) Reset()                    { *m = Concept_ScopeNote{} }
func (m *Concept_ScopeNote) String() string            { return proto.CompactTextString(m) }
func (*Concept_ScopeNote) ProtoMessage()               {}
func (*Concept_ScopeNote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 3} }

type Concept_Taxonomy struct {
	SourceConceptId             int32  `protobuf:"varint,1,opt,name=source_concept_id,json=sourceConceptId" json:"source_concept_id,omitempty"`
	SourceConceptName           string `protobuf:"bytes,2,opt,name=source_concept_name,json=sourceConceptName" json:"source_concept_name,omitempty"`
	SourceConceptType           string `protobuf:"bytes,3,opt,name=source_concept_type,json=sourceConceptType" json:"source_concept_type,omitempty"`
	SourceConceptVernacular     string `protobuf:"bytes,4,opt,name=source_concept_vernacular,json=sourceConceptVernacular" json:"source_concept_vernacular,omitempty"`
	TargetConceptId             int32  `protobuf:"varint,5,opt,name=target_concept_id,json=targetConceptId" json:"target_concept_id,omitempty"`
	TargetConceptName           string `protobuf:"bytes,6,opt,name=target_concept_name,json=targetConceptName" json:"target_concept_name,omitempty"`
	TargetConceptType           string `protobuf:"bytes,7,opt,name=target_concept_type,json=targetConceptType" json:"target_concept_type,omitempty"`
	TargetConceptVernacular     string `protobuf:"bytes,8,opt,name=target_concept_vernacular,json=targetConceptVernacular" json:"target_concept_vernacular,omitempty"`
	TaxonomicRelation           string `protobuf:"bytes,9,opt,name=taxonomic_relation,json=taxonomicRelation" json:"taxonomic_relation,omitempty"`
	TaxonomicVerificationStatus string `protobuf:"bytes,10,opt,name=taxonomic_verification_status,json=taxonomicVerificationStatus" json:"taxonomic_verification_status,omitempty"`
}

func (m *Concept_Taxonomy) Reset()                    { *m = Concept_Taxonomy{} }
func (m *Concept_Taxonomy) String() string            { return proto.CompactTextString(m) }
func (*Concept_Taxonomy) ProtoMessage()               {}
func (*Concept_Taxonomy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 4} }

type ConceptRelation struct {
	ConceptCreated string `protobuf:"bytes,2,opt,name=concept_created,json=conceptCreated" json:"concept_created,omitempty"`
	ConceptId      int32  `protobuf:"varint,3,opt,name=concept_id,json=conceptId" json:"concept_id,omitempty"`
	ConceptName    string `protobuf:"bytes,4,opt,name=concept_name,json=conceptName" json:"concept_name,omitempty"`
	ConceptStatus  string `protobuf:"bytes,5,opt,name=concept_status,json=conceptStatus" json:"concept_status,omitempty"`
	ConceptType    string `protobuf:"bytes,6,opt,name=concept_type,json=conceptType" json:"concept_type,omitempty"`
	ConceptUpdated string `protobuf:"bytes,7,opt,name=concept_updated,json=conceptUpdated" json:"concept_updated,omitempty"`
	IsTimesTag     int32  `protobuf:"varint,8,opt,name=is_times_tag,json=isTimesTag" json:"is_times_tag,omitempty"`
	Vernacular     string `protobuf:"bytes,9,opt,name=vernacular" json:"vernacular,omitempty"`
}

func (m *ConceptRelation) Reset()                    { *m = ConceptRelation{} }
func (m *ConceptRelation) String() string            { return proto.CompactTextString(m) }
func (*ConceptRelation) ProtoMessage()               {}
func (*ConceptRelation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type TestModel struct {
	Class []*TestModel_Class `protobuf:"bytes,2,rep,name=class" json:"class,omitempty"`
}

func (m *TestModel) Reset()                    { *m = TestModel{} }
func (m *TestModel) String() string            { return proto.CompactTextString(m) }
func (*TestModel) ProtoMessage()               {}
func (*TestModel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TestModel) GetClass() []*TestModel_Class {
	if m != nil {
		return m.Class
	}
	return nil
}

type TestModel_Class struct {
	Something string `protobuf:"bytes,1,opt,name=something" json:"something,omitempty"`
}

func (m *TestModel_Class) Reset()                    { *m = TestModel_Class{} }
func (m *TestModel_Class) String() string            { return proto.CompactTextString(m) }
func (*TestModel_Class) ProtoMessage()               {}
func (*TestModel_Class) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

func init() {
	proto.RegisterType((*GetConceptSearchRequest)(nil), "thesemanticapi.GetConceptSearchRequest")
	proto.RegisterType((*GetConceptSearchResponse)(nil), "thesemanticapi.GetConceptSearchResponse")
	proto.RegisterType((*GetNameConceptTypeSpecificConceptRequest)(nil), "thesemanticapi.GetNameConceptTypeSpecificConceptRequest")
	proto.RegisterType((*GetNameConceptTypeSpecificConceptResponse)(nil), "thesemanticapi.GetNameConceptTypeSpecificConceptResponse")
	proto.RegisterType((*Concept)(nil), "thesemanticapi.Concept")
	proto.RegisterType((*Concept_ArticleList)(nil), "thesemanticapi.Concept.Article_list")
	proto.RegisterType((*Concept_ArticleList_Result)(nil), "thesemanticapi.Concept.Article_list.Result")
	proto.RegisterType((*Concept_ArticleList_Result_Concepts)(nil), "thesemanticapi.Concept.Article_list.Result.Concepts")
	proto.RegisterType((*Concept_Combination)(nil), "thesemanticapi.Concept.Combination")
	proto.RegisterType((*Concept_Link)(nil), "thesemanticapi.Concept.Link")
	proto.RegisterType((*Concept_ScopeNote)(nil), "thesemanticapi.Concept.Scope_note")
	proto.RegisterType((*Concept_Taxonomy)(nil), "thesemanticapi.Concept.Taxonomy")
	proto.RegisterType((*ConceptRelation)(nil), "thesemanticapi.ConceptRelation")
	proto.RegisterType((*TestModel)(nil), "thesemanticapi.TestModel")
	proto.RegisterType((*TestModel_Class)(nil), "thesemanticapi.TestModel.Class")
	proto.RegisterEnum("thesemanticapi.GetConceptSearchRequest_Field", GetConceptSearchRequest_Field_name, GetConceptSearchRequest_Field_value)
	proto.RegisterEnum("thesemanticapi.GetNameConceptTypeSpecificConceptRequest_ConceptType", GetNameConceptTypeSpecificConceptRequest_ConceptType_name, GetNameConceptTypeSpecificConceptRequest_ConceptType_value)
	proto.RegisterEnum("thesemanticapi.GetNameConceptTypeSpecificConceptRequest_Field", GetNameConceptTypeSpecificConceptRequest_Field_name, GetNameConceptTypeSpecificConceptRequest_Field_value)
	proto.RegisterEnum("thesemanticapi.ConceptRelation_Class", ConceptRelation_Class_name, ConceptRelation_Class_value)
	proto.RegisterEnum("thesemanticapi.TestModel_Category", TestModel_Category_name, TestModel_Category_value)
}

var fileDescriptor0 = []byte{
	// 1480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x58, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xc6, 0x5f, 0xb1, 0xfd, 0x3a, 0x89, 0x9d, 0xe9, 0x47, 0xb6, 0x6e, 0x4a, 0x53, 0x57, 0xa5,
	0x29, 0x88, 0x48, 0x04, 0x90, 0x28, 0x82, 0x43, 0x08, 0xa5, 0xaa, 0x44, 0xdb, 0x60, 0x9b, 0x72,
	0xe0, 0xb0, 0xda, 0xac, 0x27, 0xce, 0xaa, 0xeb, 0xdd, 0x65, 0x67, 0x5c, 0x61, 0xf8, 0x07, 0x48,
	0xdc, 0xe1, 0x0f, 0x70, 0xe2, 0xca, 0x91, 0x2b, 0x77, 0xae, 0xa8, 0xe2, 0x27, 0xf0, 0x1b, 0x78,
	0xe7, 0x63, 0xd7, 0xb3, 0xbb, 0x76, 0x62, 0x10, 0x27, 0x2e, 0xc9, 0xce, 0x3b, 0xcf, 0xbc, 0xf3,
	0x7e, 0x3e, 0x33, 0x63, 0x68, 0x32, 0x3a, 0xd9, 0x8f, 0xe2, 0x90, 0x87, 0x64, 0x93, 0x9f, 0x51,
	0x1c, 0x39, 0x01, 0xf7, 0x5c, 0x27, 0xf2, 0x7a, 0x3f, 0x95, 0x61, 0xfb, 0x21, 0xe5, 0x47, 0x61,
	0xe0, 0xd2, 0x88, 0x0f, 0xa8, 0x13, 0xbb, 0x67, 0x7d, 0xfa, 0xd5, 0x94, 0x32, 0x4e, 0xae, 0xc2,
	0x5a, 0x78, 0x7a, 0xca, 0x28, 0xb7, 0xca, 0xbb, 0xa5, 0xbd, 0x5a, 0x5f, 0x8f, 0xc8, 0x65, 0xa8,
	0x21, 0x20, 0x9e, 0x59, 0x15, 0x14, 0x37, 0xfb, 0x6a, 0xd0, 0x7b, 0x59, 0x82, 0xda, 0x27, 0x1e,
	0xf5, 0x47, 0x64, 0x03, 0x9a, 0xf2, 0xc3, 0x76, 0x7c, 0xbf, 0xf3, 0x0a, 0x69, 0x43, 0x4b, 0x0d,
	0x23, 0x67, 0x4c, 0x59, 0xa7, 0x44, 0xb6, 0xe1, 0x92, 0x12, 0xa0, 0x0d, 0xcf, 0x69, 0x6c, 0xb3,
	0xd9, 0xe4, 0x24, 0xf4, 0x3b, 0xe5, 0x39, 0xd2, 0xf7, 0x82, 0xe7, 0xac, 0x53, 0x21, 0x04, 0x36,
	0x35, 0xd2, 0xf9, 0x3a, 0x0c, 0xc2, 0xc9, 0xac, 0x53, 0x45, 0xab, 0x88, 0x92, 0xb9, 0xe1, 0xe4,
	0xc4, 0x0b, 0x1c, 0xee, 0x85, 0x01, 0xeb, 0xd4, 0xe6, 0xd8, 0x31, 0x0d, 0xdd, 0x70, 0x84, 0x3b,
	0xad, 0xcd, 0xb1, 0x4e, 0x8c, 0x7b, 0xf9, 0x14, 0x15, 0x33, 0xde, 0xa9, 0x93, 0x2b, 0xb0, 0xa5,
	0xe4, 0xcc, 0x0d, 0x23, 0x6a, 0x07, 0x21, 0x47, 0x78, 0x83, 0x74, 0xe1, 0xaa, 0x16, 0xcb, 0x38,
	0xd8, 0x18, 0x20, 0x5b, 0x3a, 0xd7, 0x69, 0xf6, 0x7e, 0x2e, 0x81, 0x55, 0x0c, 0x14, 0x8b, 0x70,
	0x73, 0x4a, 0x76, 0xa0, 0x89, 0x8a, 0x66, 0xb1, 0x37, 0x3e, 0xe3, 0x56, 0x49, 0x46, 0x65, 0x2e,
	0x20, 0x37, 0xa1, 0x15, 0x4c, 0x27, 0x76, 0x4c, 0xd9, 0xd4, 0xe7, 0x4c, 0x07, 0x13, 0x50, 0xd4,
	0x57, 0x12, 0x72, 0x1f, 0xea, 0xc9, 0x64, 0x65, 0xb7, 0xb2, 0xd7, 0x3a, 0xb8, 0xb9, 0x9f, 0x4d,
	0xd3, 0xbe, 0xde, 0xb6, 0x4f, 0x7d, 0xe9, 0x6f, 0x3f, 0xc1, 0x8b, 0x1c, 0x31, 0xee, 0xf0, 0x29,
	0xb3, 0xaa, 0x72, 0x5b, 0x3d, 0xea, 0xfd, 0x56, 0x81, 0x3d, 0x34, 0xf7, 0x89, 0x33, 0xa1, 0x7a,
	0xed, 0x70, 0x16, 0xd1, 0x41, 0x44, 0x5d, 0xef, 0xd4, 0x73, 0x53, 0x75, 0x2a, 0xd1, 0x0b, 0x13,
	0x4a, 0xee, 0x41, 0x87, 0x69, 0x3c, 0xc6, 0x5a, 0x2e, 0xd0, 0x9b, 0xb4, 0x59, 0x56, 0x4f, 0xef,
	0x1b, 0x58, 0xd7, 0x9f, 0x36, 0xc7, 0x6d, 0xc8, 0x35, 0xb8, 0x62, 0x8e, 0xed, 0x60, 0xc6, 0x65,
	0x5e, 0xb0, 0x1a, 0x16, 0x4e, 0x45, 0x34, 0xc6, 0xba, 0x58, 0x38, 0x15, 0xc6, 0x63, 0xac, 0x8c,
	0x85, 0x53, 0x22, 0xc7, 0x95, 0xff, 0x7b, 0xdd, 0xfd, 0x52, 0x82, 0x7b, 0x2b, 0x24, 0xf2, 0xbf,
	0x29, 0xc4, 0xb7, 0xf2, 0x85, 0xb8, 0xbd, 0xac, 0x10, 0x2f, 0x2c, 0xc0, 0x3f, 0x2f, 0x43, 0x5d,
	0x83, 0xc9, 0x87, 0xd0, 0x74, 0xf0, 0x8b, 0xf1, 0x30, 0x66, 0x68, 0xd5, 0x4a, 0x15, 0x3e, 0x5f,
	0x41, 0x1e, 0xc2, 0xba, 0x19, 0x73, 0x6d, 0xda, 0xed, 0x25, 0x1a, 0xf0, 0x7f, 0x8a, 0xed, 0x67,
	0x16, 0x92, 0xbb, 0xd0, 0xd6, 0x85, 0x6c, 0xbb, 0x31, 0x75, 0x38, 0x1d, 0x69, 0xa3, 0x37, 0xb5,
	0xf8, 0x48, 0x49, 0xc9, 0x0d, 0x80, 0x04, 0xe8, 0x8d, 0xac, 0x9a, 0x8c, 0x53, 0x53, 0x4b, 0x1e,
	0x8d, 0xc8, 0x2d, 0x61, 0x90, 0x9a, 0x0e, 0x30, 0x2f, 0xd6, 0x9a, 0x54, 0xd2, 0xd2, 0x32, 0x91,
	0x2a, 0x72, 0x07, 0x12, 0x9d, 0xb6, 0x0e, 0x4f, 0x5d, 0x82, 0x36, 0xb4, 0x74, 0x20, 0x85, 0xa6,
	0x26, 0x51, 0xd7, 0x56, 0x23, 0xa3, 0x49, 0x64, 0xda, 0x34, 0x7a, 0x1a, 0x8d, 0xa4, 0xd1, 0xcd,
	0x8c, 0xd1, 0x9f, 0x2b, 0x29, 0x39, 0x84, 0x16, 0x56, 0x9f, 0x4b, 0x83, 0x11, 0x86, 0x84, 0x59,
	0xb0, 0x5a, 0x9c, 0xcd, 0x35, 0x64, 0x17, 0xd6, 0x3d, 0x86, 0xed, 0x31, 0xa1, 0xf8, 0xd7, 0x19,
	0x5b, 0x2d, 0x55, 0x21, 0x1e, 0x1b, 0x0a, 0xd1, 0xd0, 0x19, 0x93, 0x03, 0xa8, 0xc9, 0x26, 0xb1,
	0xd6, 0xa5, 0xfa, 0x9d, 0x65, 0x49, 0xf8, 0x14, 0x41, 0x7d, 0x05, 0x25, 0x47, 0xd0, 0x32, 0xea,
	0xdd, 0xda, 0x90, 0x2b, 0x7b, 0xcb, 0x56, 0x0e, 0x52, 0x68, 0x1f, 0xe4, 0xb2, 0x27, 0x62, 0x15,
	0xd9, 0x43, 0x36, 0xca, 0x75, 0x87, 0xb5, 0xa9, 0xe2, 0xa0, 0xe4, 0x87, 0x91, 0xf7, 0x99, 0xe4,
	0xad, 0x0f, 0xa0, 0x91, 0xb4, 0xad, 0xd5, 0x96, 0x7b, 0xed, 0x2e, 0xdb, 0x6b, 0xa8, 0x71, 0xfd,
	0x74, 0x05, 0x79, 0x15, 0xe0, 0x05, 0x8d, 0x03, 0xc7, 0x9d, 0xfa, 0x4e, 0x6c, 0x75, 0xe4, 0x0e,
	0x86, 0xa4, 0xfb, 0xb2, 0x02, 0xeb, 0x87, 0x46, 0x57, 0x93, 0x07, 0xf3, 0x9e, 0x51, 0xa5, 0xfd,
	0xc6, 0xb2, 0xdd, 0xcc, 0x65, 0xfb, 0xaa, 0xe5, 0xe6, 0x7d, 0x84, 0x1c, 0xcc, 0x43, 0xee, 0xf8,
	0xba, 0x2b, 0xd5, 0xa0, 0xfb, 0x57, 0x19, 0xd6, 0x14, 0x12, 0x79, 0xa6, 0x7a, 0x12, 0x8e, 0x66,
	0xba, 0xab, 0xe5, 0xb7, 0x68, 0xbe, 0x93, 0x19, 0x06, 0x99, 0xca, 0x55, 0xd8, 0x7c, 0x6a, 0x44,
	0x8e, 0xa1, 0xa1, 0x8b, 0x83, 0x49, 0x4e, 0x6f, 0x1d, 0xbc, 0xf3, 0x0f, 0x8c, 0x4a, 0xe6, 0x58,
	0x3f, 0xd5, 0x22, 0x76, 0x17, 0x55, 0xa6, 0xfb, 0x45, 0x7e, 0x93, 0xdb, 0xb0, 0x31, 0x0a, 0xdd,
	0xe9, 0x84, 0x06, 0xba, 0x7a, 0x6b, 0x72, 0x72, 0x3d, 0x11, 0xca, 0xf2, 0x15, 0x7e, 0x79, 0xdc,
	0x4f, 0x9a, 0x44, 0x0d, 0x44, 0x36, 0x25, 0x8f, 0x87, 0xa7, 0xf6, 0x04, 0x55, 0xc5, 0x1e, 0x3a,
	0xae, 0x1a, 0x64, 0x53, 0xc8, 0x9f, 0x9e, 0x3e, 0xd6, 0x52, 0xd2, 0x81, 0xca, 0x34, 0xf6, 0x75,
	0x63, 0x88, 0xcf, 0xee, 0x97, 0xd0, 0x48, 0x0c, 0xc4, 0x73, 0xa1, 0x91, 0x1c, 0x05, 0x32, 0xfa,
	0xcd, 0x7e, 0x5d, 0x8c, 0x3f, 0xa6, 0xf3, 0x29, 0x3c, 0x40, 0x30, 0x3a, 0xe9, 0xd4, 0xd3, 0x78,
	0x9c, 0x4e, 0xe1, 0xb1, 0x23, 0xc9, 0x44, 0x4f, 0x1d, 0xd3, 0xb8, 0xfb, 0x47, 0x05, 0x5a, 0x06,
	0x81, 0x88, 0x43, 0xd0, 0xa0, 0x10, 0x59, 0x96, 0x3a, 0x03, 0x6d, 0x43, 0x2e, 0x4a, 0x14, 0xfb,
	0xef, 0x86, 0x09, 0x65, 0xe1, 0x34, 0x76, 0xa9, 0x6d, 0xf0, 0x88, 0xca, 0x6c, 0xd7, 0x00, 0x0d,
	0x24, 0xe6, 0x28, 0x25, 0x96, 0x07, 0x70, 0xf3, 0x1c, 0x15, 0x92, 0x6b, 0xd4, 0x11, 0xbd, 0xb3,
	0x4c, 0x89, 0x24, 0x9f, 0xf3, 0xd5, 0xc8, 0x54, 0x55, 0xcf, 0x57, 0x23, 0x53, 0x97, 0x73, 0x88,
	0x3b, 0xf1, 0x98, 0x72, 0xbb, 0x40, 0x8c, 0xa6, 0x43, 0x43, 0x89, 0x59, 0xea, 0x50, 0x4e, 0x85,
	0x41, 0x9e, 0x3b, 0xcb, 0x94, 0x2c, 0x72, 0x28, 0xa7, 0x46, 0x3a, 0x54, 0x3f, 0x5f, 0x8d, 0x70,
	0xa8, 0xfb, 0x6b, 0x19, 0xaa, 0x82, 0x98, 0x72, 0xfc, 0x5e, 0xba, 0x88, 0xdf, 0xcb, 0xab, 0xf0,
	0x7b, 0x65, 0x15, 0x7e, 0xaf, 0x16, 0xf9, 0x3d, 0xcf, 0xb9, 0xb5, 0x02, 0xe7, 0x62, 0xef, 0x09,
	0x22, 0xd5, 0x91, 0x92, 0xdf, 0x78, 0x97, 0xa9, 0x8b, 0xff, 0xc2, 0xfc, 0xba, 0xba, 0x9c, 0x8b,
	0x21, 0xda, 0x7e, 0x1d, 0x9a, 0x72, 0xc2, 0x38, 0x4e, 0x1a, 0x42, 0x20, 0xf7, 0x42, 0x73, 0x26,
	0x4e, 0x14, 0x79, 0xc1, 0x58, 0xcd, 0xab, 0x83, 0xa4, 0xa5, 0x65, 0x12, 0xd2, 0x85, 0x46, 0xac,
	0xcf, 0x06, 0x3c, 0x42, 0xe4, 0xf2, 0x64, 0xdc, 0xfd, 0x16, 0x60, 0xce, 0xce, 0x22, 0x88, 0x73,
	0x5a, 0x4f, 0x2e, 0x1b, 0x29, 0x63, 0x93, 0xd7, 0xa0, 0x3d, 0x9f, 0x36, 0xe3, 0xb8, 0x91, 0x62,
	0x64, 0x24, 0xb3, 0x38, 0x69, 0x56, 0x25, 0x87, 0x93, 0xc9, 0xfb, 0xbe, 0x0a, 0x8d, 0x84, 0xaf,
	0xc9, 0xeb, 0xb0, 0x55, 0xec, 0x2f, 0x95, 0xc7, 0x36, 0xcb, 0x35, 0xd5, 0x3e, 0x5c, 0x5a, 0xd4,
	0x48, 0xca, 0x98, 0x2d, 0x56, 0xe8, 0x9e, 0x22, 0xde, 0x30, 0x2a, 0x8b, 0x97, 0x11, 0x7b, 0x1f,
	0xae, 0xe5, 0xf0, 0xc6, 0x01, 0xa2, 0x12, 0xbe, 0x9d, 0x59, 0xf5, 0x2c, 0x9d, 0x16, 0x7e, 0x2c,
	0x6b, 0xab, 0x36, 0xcf, 0xf5, 0x12, 0xda, 0xb5, 0xbc, 0x7f, 0xb6, 0x78, 0xa1, 0x69, 0x8a, 0x78,
	0xa3, 0x51, 0xb2, 0xf8, 0xc4, 0x8f, 0x1c, 0xde, 0xf0, 0x43, 0x55, 0xd2, 0x76, 0x66, 0x95, 0xe1,
	0xc7, 0x9b, 0x40, 0xf4, 0x09, 0x8a, 0x8f, 0x85, 0xb4, 0x7e, 0x9a, 0xc9, 0x56, 0x7a, 0x26, 0xb9,
	0x74, 0x90, 0x8f, 0xe0, 0xc6, 0x1c, 0x8e, 0xbb, 0x88, 0xab, 0xac, 0xe6, 0x2a, 0xd5, 0x4c, 0xaa,
	0xf2, 0xae, 0xa7, 0xa0, 0x67, 0x06, 0x46, 0xb5, 0x56, 0xef, 0xbb, 0x0a, 0xb4, 0x73, 0x97, 0x99,
	0x45, 0x17, 0xbc, 0xf2, 0x0a, 0x17, 0xbc, 0xca, 0x45, 0x04, 0x50, 0x5d, 0x85, 0x00, 0x6a, 0xab,
	0x10, 0xc0, 0xda, 0x4a, 0x17, 0xbc, 0xfa, 0xc2, 0x0b, 0x5e, 0x9e, 0x29, 0x1a, 0x05, 0xa6, 0xc8,
	0x5e, 0x5e, 0x9a, 0xf9, 0xcb, 0x4b, 0xef, 0x0b, 0xa8, 0x1d, 0xf9, 0x0e, 0x13, 0xc7, 0xf9, 0xa6,
	0xfc, 0x30, 0x5f, 0x66, 0x59, 0x99, 0x7a, 0x92, 0x65, 0x65, 0xea, 0x2d, 0x96, 0x95, 0xa9, 0x47,
	0xd8, 0xef, 0x25, 0x68, 0x0e, 0xf1, 0xba, 0xfe, 0x18, 0x1f, 0x40, 0x3e, 0x79, 0x17, 0x6a, 0xae,
	0x40, 0xc8, 0x73, 0x77, 0xc1, 0x1d, 0x34, 0x45, 0xee, 0x4b, 0x45, 0x7d, 0x85, 0xee, 0xde, 0x49,
	0xac, 0xc3, 0x57, 0x0c, 0x0b, 0x27, 0x94, 0x9f, 0x21, 0x29, 0xa5, 0xc4, 0x92, 0x08, 0x7a, 0xa7,
	0x78, 0xfe, 0x63, 0x3c, 0xc6, 0x21, 0xde, 0xf5, 0xf0, 0x41, 0x95, 0x7c, 0x9b, 0xae, 0x14, 0xc4,
	0xca, 0x9b, 0x82, 0x58, 0x39, 0x54, 0x10, 0x4b, 0x9f, 0x0e, 0x7e, 0x2c, 0xc3, 0x95, 0xe1, 0x19,
	0x1d, 0x68, 0xc3, 0x0f, 0x8f, 0x1f, 0x0d, 0x68, 0xfc, 0xc2, 0x73, 0x29, 0xa1, 0xd0, 0xc9, 0xff,
	0x14, 0x40, 0xee, 0xe6, 0x9d, 0x5c, 0xf2, 0xab, 0x4a, 0x77, 0xef, 0x62, 0xa0, 0x7e, 0xcc, 0xfd,
	0x50, 0x82, 0x5b, 0x17, 0x3e, 0xfd, 0xc8, 0x7b, 0x0b, 0xf4, 0xad, 0xf4, 0xec, 0xef, 0xde, 0xff,
	0x17, 0x2b, 0x95, 0x69, 0x27, 0x6b, 0xf2, 0xd7, 0xa4, 0xb7, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x48, 0xef, 0xdb, 0x11, 0x5a, 0x12, 0x00, 0x00,
}
